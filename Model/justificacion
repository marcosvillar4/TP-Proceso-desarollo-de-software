Informe de Justificación de Diseño del Diagrama UML
1. Menú Digital y Productos
Requerimiento:
El sistema debe ofrecer un menú digital con categorías como entradas, platos principales, postres y bebidas. Cada producto debe tener nombre, descripción, precio y una lista de ingredientes con advertencias sobre alérgenos.

Justificación de Diseño:

Se define la clase Menu, que contiene una lista de ProductoMenu, representando cada ítem del menú.

ProductoMenu posee atributos como nombre, descripcion, precio y una lista de alergenicos, así como un booleano contieneAlergenos.

Se utilizan subclases de ProductoMenu (Entrada, PlatoPrincipal, Postre, Bebida) para representar de forma explícita las distintas categorías del menú.

La clase Ingrediente permite asociar ingredientes con cada producto e incluye la información sobre alérgenos.

2. Selección de Productos y Creación de Pedido
Requerimiento:
Los clientes deben poder seleccionar productos para su pedido, el sistema debe calcular el total automáticamente.

Justificación de Diseño:

La clase Cliente tiene una operación elegirProducto(menu: Menu) y otra pagarPedido(pedido: Pedido, medio: MedioDePago).

La clase Pedido tiene una lista de productos (platos: List<ProductoMenu>) y métodos calcularTotal() y confirmarPedido().

Se establece una relación de composición entre Cliente y Pedido, indicando que un cliente realiza pedidos.

3. Aplicación de Cupones de Descuento
Requerimiento:
Los clientes pueden aplicar cupones, que deben ser validados.

Justificación de Diseño:

La clase Pedido está asociada a Orden, que incluye un cupon.

Orden utiliza un ValidadorDescuento para validar el cupón ingresado (validarDescuento(cupon: String)).

4. Opciones de Pago
Requerimiento:
El sistema debe permitir el pago con tarjeta de crédito o débito.

Justificación de Diseño:

Se define una interfaz IPagable con el método pagar(monto: Float).

TarjetaCredito y TarjetaDebito implementan esta interfaz.

La clase Pedido se asocia a IPagable para manejar el pago mediante una de estas opciones.

5. Estado del Pedido
Requerimiento:
El pedido debe cambiar de estado desde "En espera" hasta "Entregado", y empleados pueden actualizarlo.

Justificación de Diseño:

Se define una enumeración EstadoPedido con los estados posibles.

Pedido tiene un atributo estado: EstadoPedido.

Empleado (y sus subclases Mesero, Chef, Administrativo) tiene el método cambiarEstado(pedido: Pedido).

6. Notificaciones Automáticas
Requerimiento:
Los clientes deben recibir notificaciones por app o correo cuando cambia el estado del pedido.

Justificación de Diseño:

Se define una interfaz INotificacion con el método enviarNotificacion(estado: EstadoPedido).

Se implementan dos adaptadores: AppNotifAdapter y EmailNotifAdapter.

Estas clases se usan en el contexto del cliente para recibir notificaciones automáticas.

7. Facturación
Requerimiento:
Cuando el pedido es entregado, se genera y envía una factura al cliente.

Justificación de Diseño:

Pedido está asociado a Factura, que contiene el montoTotal y la fecha.

Factura tiene el método enviarPorCorreo(correo: String).

Se utiliza el patrón Factory mediante la clase FacturaFactory para crear facturas.

Conclusión
El modelo diseñado en el diagrama UML refleja de forma precisa y estructurada todos los requerimientos del sistema. Utiliza principios de diseño orientado a objetos como herencia, composición, encapsulamiento y patrones de diseño (como el Factory y el Adapter). Esto garantiza una solución flexible, mantenible y escalable, adaptada a las necesidades de un restaurante moderno con funcionalidades digitales integradas.